{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DOCKER","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\"</p>"},{"location":"despliegueAplicacion/","title":"Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y docker-compose","text":""},{"location":"despliegueAplicacion/#estructura-de-directorios","title":"Estructura de Directorios","text":"<p>Primero, creamos la estructura de directorios necesaria para contener los archivos de configuraci\u00f3n y la aplicaci\u00f3n.</p> <pre><code>mkdir -p /home/usuario/practica6-2/{nginx,php,www/html}\ncd practica6-2\ntouch docker-compose.yml\ntouch Dockerfile\ntouch nginx/default.conf\ntouch php/Dockerfile\ntouch www/html/index.php\n</code></pre> <p></p> <p>Dentro de la carpeta /home/usuario/practica6-2/, se generan las siguientes carpetas y archivos:</p> <pre><code>/home/usuario/practica6-2/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 nginx\n\u2502   \u251c\u2500\u2500 default.conf\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 php\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 html\n        \u2514\u2500\u2500 index.php\n</code></pre> <p></p>"},{"location":"despliegueAplicacion/#creacion-del-contenedor-de-nginx","title":"Creaci\u00f3n del contenedor de Nginx","text":"<p>Primero, configuramos el contenedor de Nginx. En el archivo docker-compose.yml, especificamos lo siguiente:</p> <pre><code>nginx:\n  assets/images2/image: nginx:latest\n  container_name: nginx-container\n  ports:\n    - 80:80\n</code></pre> <p>Esta configuraci\u00f3n ser\u00e1 la encargada de descargarse la \u00faltima versi\u00f3n de la assets/images2/imagen de Nginx, creando un contenedor con ella y publicar o escuchar en el puerto 80.</p> <p></p> <p>Ejecutamos el contenedor con:</p> <pre><code>sudo docker-compose up -d\n</code></pre> <p></p> <p>Al ejecutar docker ps, confirmamos que el contenedor de Nginx est\u00e1 corriendo. Luego, accedemos a <code>http/192.168.76.147</code> (en mi caso) y vemos la p\u00e1gina de bienvenida de Nginx.</p> <p> </p>"},{"location":"despliegueAplicacion/#creacion-del-contenedor-php","title":"Creaci\u00f3n del contenedor PHP","text":"<p>El siguiente paso es crear el contenedor PHP. PAra ello editaremos el archivo index.php dentro de www/html/:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n  &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p> </p> <p>A continuaci\u00f3n, configuramos el archivo default.conf dentro de la carpeta nginx/:</p> <pre><code>server {\n    listen 80 default_server;\n    root /var/www/html;\n    index index.html index.php;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log /var/log/nginx/error.log error;\n\n    sendfile off;\n\n    client_max_body_size 100m;\n\n     location ~ .php$ {\n        fastcgi_split_path_info ^(.+.php)(/.+)$;\n        fastcgi_pass php:9000;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n    }\n\n    location ~ /.ht {\n        deny all;\n    }\n}\n</code></pre> <p></p> <p>El Dockerfile en la carpeta nginx/:</p> <pre><code>FROM nginx:latest\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n</code></pre> <p></p> <p>Finalmente, actualizamos el docker-compose.yml para agregar el contenedor PHP y asociarlo al contenedor Nginx:</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes:\n      - ./www/html/:/var/www/html/\n\n  php:\n    assets/images2/image: php:7.0-fpm\n    container_name: php-container\n    expose:\n      - 9000\n    volumes:\n      - ./www/html/:/var/www/html/\n</code></pre> <p></p> <p>Ejecutamos nuevamente el comando:</p> <pre><code>sudo docker-compose up -d\n</code></pre> <p> </p> <p>Accedemos a <code>http://192.168.76.147</code> y vemos la p\u00e1gina \"\u00a1Hola mundo!\", confirmando que PHP est\u00e1 funcionando correctamente.</p> <p></p>"},{"location":"despliegueAplicacion/#creacion-de-un-contenedor-de-datos","title":"Creaci\u00f3n de un contenedor de datos","text":"<p>Para mejorar la persistencia de los datos, creamos un contenedor independiente que se encargar\u00e1 de almacenar los datos de la aplicaci\u00f3n:</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes_from:\n      - app-data\n\n  php:\n    assets/images2/image: php:7.0-fpm\n    container_name: php-container\n    expose:\n      - 9000\n    volumes_from:\n      - app-data\n\n  app-data:\n    assets/images2/image: php:7.0-fpm\n    container_name: app-data-container\n    volumes:\n      - ./www/html/:/var/www/html/\n    command: \"true\"\n</code></pre> <p></p> <p>Ejecutamos nuevamente <code>sudo docker-compose up -d</code> para crear y lanzar los contenedores.</p> <p></p> <p>Ahora vemos que todos est\u00e1n corriendo correctamente con el comando <code>sudo docker ps -a</code>.</p> <p></p>"},{"location":"despliegueAplicacion/#creacion-de-un-contenedor-mysql","title":"Creaci\u00f3n de un contenedor MySQL","text":"<p>Para conectar PHP con MySQL, a\u00f1adimos un contenedor para MySQL en el archivo docker-compose.yml. Primero, instalamos la extensi\u00f3n pdo_mysql en PHP creando el Dockerfile dentro de php/:</p> <pre><code>FROM php:7.0-fpm\nRUN docker-php-ext-install pdo_mysql\n</code></pre> <p></p> <p>Luego, actualizamos docker-compose.yml:</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes_from:\n      - app-data\n  php:\n    build: ./php/\n    container_name: php-container\n    expose:\n      - 9000\n    links:\n      - mysql\n    volumes_from:\n      - app-data\n\n  app-data:\n    assets/images2/image: php:7.0-fpm\n    container_name: app-data-container\n    volumes:\n      - ./www/html/:/var/www/html/\n    command: \"true\"\n\n  mysql:\n    assets/images2/image: mysql:5.7\n    container_name: mysql-container\n    volumes_from:\n      - mysql-data\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: password\n\n  mysql-data:\n    assets/images2/image: mysql:5.7\n    container_name: mysql-data-container\n    volumes:\n      - /var/lib/mysql\n    command: \"true\"\n</code></pre> <p></p> <p>Creamos o modificamos el archivo index.php para conectar con la base de datos MySQL y verificar las tablas.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n        &lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n        &lt;?\n        $database =\"mydb\";\n        $user = \"myuser\";\n        $password = \"password\";\n        $host = \"mysql\";\n\n        $connection = new PDO(\"mysql:host={$host};dbname={$database};charset=utf8\", $user, $password);\n        $query = $connection-&gt;query(\"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'\");\n        $tables = $query-&gt;fetchAll(PDO::FETCH_COLUMN);\n\n        if (empty($tables)) {\n            echo \"&lt;p&gt;No hay tablas en la base de datos \\\"{$database}\\\".&lt;/p&gt;\";\n        } else {\n            echo \"&lt;p&gt;La base de datos \\\"{$database}\\\" tiene las siguientes tablas:&lt;/p&gt;\";\n            echo \"&lt;ul&gt;\";\n            foreach ($tables as $table) {\n                echo \"&lt;li&gt;{$table}&lt;/li&gt;\";\n            }\n            echo \"&lt;/ul&gt;\";\n        }\n        ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Finalmente, ejecutamos <code>sudo docker-compose up -d</code> para arrancar los contenedores.</p> <p> </p>"},{"location":"despliegueAplicacion/#verificacion-de-la-conexion-a-mysql","title":"Verificaci\u00f3n de la conexi\u00f3n a MySQL","text":"<p>Accedemos a http:// y, si todo est\u00e1 bien configurado, deber\u00edamos ver una lista de las tablas de la base de datos MySQL. <p></p> <p>Esto no es realmente as\u00ed, sino que no son visibles para un usuario normal, simplemente hay que cambiar el <code>index.php</code> y cambiar el usuario y la contrase\u00f1a</p> <p> </p>"},{"location":"despliegueAplicacion/#esquema-de-la-infraestructura-completa","title":"Esquema de la Infraestructura Completa","text":"<p>La infraestructura final consta de los siguientes contenedores:</p> <p></p> <p>Author: Jorge Pradillo Hinterberger</p>"},{"location":"despliegueLDAP/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y Docker Compose","text":""},{"location":"despliegueLDAP/#despliegue-con-docker-de-nginx-con-dominio-de-autenticacion-ldap-y-openldap","title":"Despliegue con Docker de NGINX con dominio de autenticaci\u00f3n LDAP y OpenLDAP","text":""},{"location":"despliegueLDAP/#creacion-del-indexhtml","title":"Creaci\u00f3n del index.html","text":"<p>Primero crearemos un directorio <code>app</code> con un <code>index.html</code> b\u00e1sico. Para ello simplemente ejecutaremos los siguiente comandos:</p> <pre><code>mkdir practica6-3\ncd practica6-3\nmkdir app\ncd app\nsudo nano index.html\n</code></pre> <p>Y en el <code>index.html</code> escribiremos lo siguiente: </p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u00a1Hola Mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#configuracion-nginx","title":"Configuraci\u00f3n Nginx","text":"<p>Una vez hecho esto crearemos otro directorio con la configuraci\u00f3n de <code>Nginx</code> que contenga el siguiente contenido:</p> <pre><code>server {\n    listen 8080;\n\n    location = / {\n        auth_request /auth-proxy;\n    }\n\n    location = /auth-proxy {\n        internal;\n\n        proxy_pass http://nginx-ldap:8888;\n\n        # URL y puerto para conectarse al servidor LDAP\n        proxy_set_header X-Ldap-URL \"ldap://openldap:1389\";\n\n        # Base DN\n        proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\";\n\n        # Bind DN\n        proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\";\n\n        # Bind password\n        proxy_set_header X-Ldap-BindPass \"adminpassword\";\n    }\n}\n</code></pre> <p>Para ello crearemos un directorio <code>conf</code> y en el crearemos el documento <code>ldap_nginx.conf</code> con la configuraci\u00f3n indicada anteriormente</p> <p></p> <p>Aqu\u00ed le estamos diciendo a <code>Nginx</code> lo siguiente:</p> <ol> <li> <p>Que escuche en el puerto 8080 las peticiones HTTP</p> </li> <li> <p>Que cuando se acceda al sitio web, se solicite autorizaci\u00f3n en el directorio del sitio web llamado /auth-proxy</p> </li> <li> <p>Se crea un nuevo location para ese directorio /auth-proxy y que es donde se realizar\u00e1 la configuraci\u00f3n de c\u00f3mo conectarnos a nuestro openldap, de acuerdo con la documentaci\u00f3n oficial de Nginx a prop\u00f3sito de su m\u00f3dulo de autenticaci\u00f3n:</p> </li> <li> <p>Se indica la URL de nuestro openldap (es el nombre del contenedor que hemos levantado, ya que Docker tiene un DNS propio entre sus contenedores)</p> </li> <li> <p>El DN (Nombre distinguido) base sobre el que se realizar\u00e1n las b\u00fasquedas en openldap</p> </li> <li> <p>El usuario y contrase\u00f1a con el que nos conectaremos al openldap para realizar las consultas</p> </li> </ol>"},{"location":"despliegueLDAP/#docker-compose","title":"Docker-compose","text":"<p>Una vez configurado <code>Nginx</code> procedemos a configurar el <code>docker-compose</code></p> <p>Para ello crearemos el archivo <code>docker-compose.yml</code> y le pegaremos el c\u00f3digo siguiente que lo que har\u00e1 es configurar un entorno con <code>Nginx protegido por autenticaci\u00f3n LDAP</code> usando <code>OpenLDAP</code>.</p> <pre><code>version: '2'\n\nservices:\n  nginx-ldap:  # \n    assets/images3/image: bitnami/nginx-ldap-auth-daemon-archived # \n    ports: # \n      - 8888:8888\n  nginx: # \n    assets/images3/image: bitnami/nginx\n    ports: \n     - 8080:8080\n    volumes: # \n     - ./app:/app\n     - ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf\n  openldap: # \n    assets/images3/image: bitnami/openldap\n    ports:\n      - '1389:1389'    \n    environment: # \n      - LDAP_ADMIN_USERNAME=admin\n      - LDAP_ADMIN_PASSWORD=adminpassword\n      - LDAP_USERS=customuser\n      - LDAP_PASSWORDS=custompassword\n</code></pre> <ol> <li> <p>openldap - Servidor LDAP con usuarios predefinidos</p> </li> <li> <p>nginx-ldap - Servicio de autenticaci\u00f3n LDAP para Nginx</p> </li> <li> <p>nginx - Servidor web que usa LDAP para autenticar usuarios</p> </li> </ol> <p>Antes de acceder a los recursos servidos por <code>Nginx</code>, los usuarios deber\u00e1n autenticarse.</p> <p></p>"},{"location":"despliegueLDAP/#inicializacion-de-los-contenedores","title":"Inicializaci\u00f3n de los contenedores","text":"<p>Una vez hecho esto simplemente tenemos que iniciar los contenedores con el comando <code>sudo docker-compose up</code>. Y una vez hecho esto accedemos a la siguiente url.</p> <p>http://IP_Maquina_virtual:8080</p> <p></p> <p>Al acceder a la url anterior, nos pedir\u00e1 las credenciales que hemos configurado anteriormente las cuales son:</p> <ul> <li>Usuario: customuser</li> <li>Contrase\u00f1a: custompassword</li> </ul> <p></p> <p></p>"},{"location":"despliegueLDAP/#despliegue-de-php-y-apache-con-autenticacion-ldap","title":"Despliegue de PHP y Apache con autenticaci\u00f3n LDAP","text":""},{"location":"despliegueLDAP/#archivo-indexphp","title":"Archivo index.php","text":"<p>Para esto, primero crearemos un archivo que se llame <code>index.php</code> en el directorio <code>practica6-3</code>.</p> <pre><code>sudo nano index.php\n</code></pre> <p>En este archivo escribiremos el siguiente script:</p> <pre><code>&lt;?php\necho \"Ey, hola usuario autenticado por LDAP!\";\n?&gt;\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#dokerfile","title":"Dokerfile","text":"<p>Luego, dentro de nuestro directorio de trabajao crearemos otro directorio <code>Docker</code> con el archvio <code>Dockerfile</code> en el que a\u00f1adiremos las opciones o directivas adecuadas para que se cree una assets/images3/imagen de Docker basada en PHP con Apache y configurar la autenticaci\u00f3n LDAP en Apache.</p> <p>El scrip que debemos meter ser\u00eda el siguiente:</p> <pre><code># ./Docker/Dockerfile --&gt; directorio donde se encuentra este archivo\n\n# Imagen base sobre la que vamos a trabajar\nFROM php:7-apache\n\n# Activamos el m\u00f3dulo LDAP de Apache ejecutand el siguiente comando\nRUN a2enmod authnz_ldap\n\n# A\u00f1adimos las reglas/configuraci\u00f3n de LDAP al directorio conf-enabled de Apache\n# (crearemos este archivo en el siguiente paso)\nCOPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/\n\n# A\u00f1adimos ayuda de depuraci\u00f3n (debugging) en la configuraci\u00f3n de apache\n# En caso de necesitarlo, lo descomentamos para ejecutar el siguiente comando\n# RUN echo \"LogLevel debug\" &gt;&gt; apache2.conf\n\n# Establecemos el directorio de trabajo adecuado\nWORKDIR /var/www/html/demo\n\n\n# Configuramos Apache para usar la configuraci\u00f3n ldap definida arriba, la copiamos de nuestro ordenador al contenedor\nCOPY Docker/.htaccess ./.htaccess\n\n#  Copiamos los archivos del proyecto que necesitamos, al contenedor\n\nCOPY index.php ./\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#configuracion-ldap","title":"Configuraci\u00f3n LDAP","text":"<p>Posteriormente creamos el archivo <code>ldap-demo.conf</code> que contendr\u00e1 toda la configuraci\u00f3n <code>LDAP</code>. Aqu\u00ed se establecer\u00e1n los criterios de conexi\u00f3n con el contenedor Openldap, password y la URL.</p> <pre><code># ./Docker/ldap-demo.conf\nPassEnv LDAP_BIND_ON    \nPassEnv LDAP_PASSWORD\nPassEnv LDAP_URL\n&lt;AuthnProviderAlias ldap demo&gt;\n    AuthLDAPBindDN ${LDAP_BIND_ON}\n    AuthLDAPBindPassword ${LDAP_PASSWORD}\n    AuthLDAPURL ${LDAP_URL}\n&lt;/AuthnProviderAlias&gt; \n</code></pre> <p>Las directivas <code>PassEnv</code> al inicio del archivo, omiten nuestras credenciales y las pasa como variables de entorno al correr la assets/images3/imagen del contenedor.</p> <p></p>"},{"location":"despliegueLDAP/#archivo-de-configuracion-apache","title":"Archivo de configuraci\u00f3n Apache","text":"<p>Luego crearemos el archivo <code>.htadccess</code> que se encargar\u00e1 de configurar la autenticaci\u00f3n b\u00e1sica en Apache para proteger el acceso al sitio web.</p> <pre><code># .Docker/.htaccess\nAuthBasicProvider demo\nAuthType Basic\nAuthName \"Protected Area\"\nRequire valid-user\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#construccion-de-la-assetsimages3imagen","title":"Construcci\u00f3n de la assets/images3/imagen","text":"<p>Ahora, con el siguiente comando, construiremos la assets/images3/imagen en nuestro directorio de trabajo: </p> <pre><code>sudo docker build . -t docker-ldap -f ./Docker/Dockerfile\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#corremos-el-contenedor","title":"Corremos el contenedor","text":"<p>Ahora correremos el contenedor indicando las credenciales de nuestra cuenta LDAP mediante variables de entorno con la flag <code>-e</code>. En este caso probaremos con un servidor externo simulando que tuvieramos que integrar nuestro despliegue con un servidor ya existente en la empresa. </p> <p>El servidor utilizado ser\u00e1 https://www.freipa.org/page/Demo. En esta misma web se pueden consultar usuarios y contrase\u00f1as para poder acceder a la p\u00e1gina.</p> <pre><code>sudo docker run -p 3000:80 --name ldap_demo -e LDAP_BIND_ON='uid=admin,cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org' -e LDAP_PASSWORD='Secret123' -e LDAP_URL='LDAP://ipa.demo1.freeipa.org' docker-ldap\n</code></pre> <p></p>"},{"location":"despliegueLDAP/#comprobacion","title":"Comprobaci\u00f3n","text":"<p>Ahora solo tenemos que entrar en http://IP-EC2:3000/demo para comprobar que se ha desplegado el contenedor correctamente. Nos pedir\u00e1 nuestras credenciales las cuales son:</p> <ul> <li> <p>usuario: admin</p> </li> <li> <p>contrase\u00f1a: Secret123</p> </li> </ul> <p>Una vez en la web veremos algo similar a la siguiente assets/images3/imagen:</p> <p></p> <p>Author: Jorge Pradillo Hinterberger</p>"},{"location":"dockerizacion/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"dockerizacion/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica, dockerizaremos una aplicaci\u00f3n <code>Node.js</code> que interact\u00faa con una API para gestionar un libro de direcciones almacenado en una base de datos <code>PostgreSQL</code>. El objetivo es ejecutar la aplicaci\u00f3n en contenedores, aprendiendo a manejar <code>Docker</code> y <code>Docker Compose</code> para una configuraci\u00f3n eficiente y modular.</p>"},{"location":"dockerizacion/#parte-1-configuracion-inicial","title":"Parte 1: Configuraci\u00f3n inicial","text":""},{"location":"dockerizacion/#clonacion-del-repositorio","title":"Clonaci\u00f3n del repositorio","text":"<p>Comenzamos clonando el repositorio del proyecto en nuestra m\u00e1quina <code>Debian</code>:</p> <pre><code>git clone https://github.com/raul-profesor/DAW_practica_6.1_2024.git\ncd DAW_practica_6.1_2024\n</code></pre> <p></p>"},{"location":"dockerizacion/#instalacion-de-docker-en-el-sistema","title":"Instalaci\u00f3n de Docker en el sistema","text":"<p>Luego tenemos que instalar Docker en nuestra maquina virtual ejecutando el comando:</p> <pre><code>sudo apt install -y docker.io\n</code></pre> <p></p>"},{"location":"dockerizacion/#creacion-del-dockerfile","title":"Creaci\u00f3n del Dockerfile","text":"<p>El archivo Dockerfile ser\u00e1 utilizado para crear la imagen del contenedor de la aplicaci\u00f3n Node.js. Aqu\u00ed est\u00e1 el contenido completo del archivo, con las instrucciones necesarias completadas:</p> <pre><code># Utilizar la imagen base de Node.js\nFROM node:18.16.0-alpine3.17\n\n# Crear el directorio de la aplicaci\u00f3n en el contenedor\nWORKDIR /opt/app\n\n# Copiar los archivos package.json y package-lock.json al contenedor\nCOPY src/package.json src/package-lock.json . \n\n# Instalar las dependencias de la aplicaci\u00f3n\nRUN npm install\n\n# Copiar el c\u00f3digo fuente de la aplicaci\u00f3n al contenedor\nCOPY src/ .\n\n# Exponer el puerto 3000\nEXPOSE 3000\n\n# Comando para iniciar la aplicaci\u00f3n en modo desarrollo\nCMD [\"npm\", \"run\", \"start\"]\n</code></pre> <p> </p>"},{"location":"dockerizacion/#construccion-de-la-imagen-de-docker","title":"Construcci\u00f3n de la imagen de Docker","text":"<p>Construimos la imagen a partir del archivo <code>Dockerfile</code>. Asignamos el nombre <code>librodirecciones</code> a la imagen:</p> <pre><code>sudo docker build -t librodirecciones .\n</code></pre> <p></p>"},{"location":"dockerizacion/#ejecucion-del-contenedor","title":"Ejecuci\u00f3n del contenedor","text":"<p>Iniciamos el contenedor con el comando siguiente, exponiendo el <code>puerto 3000</code> del contenedor en el <code>puerto 3000</code> de la <code>m\u00e1quina anfitriona</code>:</p> <pre><code>sudo docker run -p 3000:3000 -d librodirecciones\n</code></pre> <p></p> <p>Si te da este error tienes que cambiar la configuraci\u00f3n del <code>Dockerfile</code> y a\u00f1adir una <code>/</code> al final de la l\u00ednea: </p> <pre><code>COPY src/package.json src/package-lock.json ./\n</code></pre> <p></p> <p>Volvemos a ejecutar el siguiente comando para que se puedan instalar las dependencias y se cree la imagen Docker.</p> <pre><code>sudo docker build -t librodirecciones .\n</code></pre> <p></p> <p>Volvemos a intentar iniciar el contenedor y que escuche las peticiones en el puerto 3000.</p> <pre><code>sudo docker run -p 3000:3000 -d librodirecciones\n</code></pre> <p></p>"},{"location":"dockerizacion/#comprobacion-de-la-configuracion","title":"Comprobaci\u00f3n de la configuraci\u00f3n","text":"<p>Tras ejecutar todos los comandos, si intentamos acceder a http://192.168.9.147:3000 nos deber\u00eda aparecer un mensaje de error de conexi\u00f3n.</p> <p></p>"},{"location":"dockerizacion/#parte-2-configuracion-con-docker-compose","title":"Parte 2: Configuraci\u00f3n con Docker Compose","text":"<p>La conexi\u00f3n entre la aplicaci\u00f3n y la base de datos <code>PostgreSQL</code> requiere que ambos contenedores est\u00e9n en la misma red. Utilizamos <code>Docker Compose</code> para gestionar estos contenedores de manera eficiente.</p> <p>Antes de seguir tenemos que tener instalado <code>Docker Compose</code> en el sistema. Para ello simplemente tenemos que ejecutar el siguiente comando:</p> <pre><code>sudo apt update\nsudo apt install docker-compose\n</code></pre> <p></p>"},{"location":"dockerizacion/#archivo-docker-composeyml","title":"Archivo docker-compose.yml","text":"<p>Este archivo define los servicios para la base de datos <code>PostgreSQL</code> y la aplicaci\u00f3n <code>Node.js</code>. A continuaci\u00f3n, el contenido completo:</p> <pre><code>version: \"3.9\"\nservices:\n  postgres:\n    image: postgres:latest\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports: \n      - '5432:5432'\n    volumes:\n      - addressbook-db:/var/lib/postgresql/data\n\n  addressbook:\n    build:\n      context: .\n    environment:\n      DB_SCHEMA: postgres\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      DB_HOST: postgres\n    depends_on:\n      - postgres\n    ports:\n      - '3000:3000'\n\nvolumes:\n  addressbook-db:\n</code></pre> <p> </p>"},{"location":"dockerizacion/#resumen-del-flujo","title":"Resumen del flujo","text":"<p><code>postgres</code>: - Inicia una base de datos PostgreSQL en el puerto 5432. - Guarda los datos de forma persistente en el volumen addressbook-db.</p> <p><code>addressbook</code>: - Construye una aplicaci\u00f3n (a partir del Dockerfile) que utiliza PostgreSQL como su base de datos. - Se conecta a postgres usando las credenciales y configuraci\u00f3n proporcionadas en las variables de entorno. - Expone su interfaz en el puerto 3000.</p> <p><code>Vol\u00famenes</code>: - El volumen addressbook-db asegura que los datos de PostgreSQL sean persistentes y no se pierdan si el contenedor se elimina.</p>"},{"location":"dockerizacion/#construccion-y-levantamiento-de-los-contenedores","title":"Construcci\u00f3n y levantamiento de los contenedores","text":"<p>Ejecutamos las migraciones necesarias para crear las tablas en la base de datos:</p> <pre><code>sudo docker-compose run addressbook npm run migrate\n</code></pre> <p></p> <p>Construimos los contenedores con las im\u00e1genes y levantamos los servicios:</p> <pre><code>sudo docker-compose up --build -d\n</code></pre> <p></p>"},{"location":"dockerizacion/#comprobacion","title":"Comprobaci\u00f3n","text":"<p>Hacemos un test para comprobar que se hayan levantado correctamente todos los servicios con el comando:</p> <pre><code>sudo docker-compose run addressbook npm test\n</code></pre> <p></p>"},{"location":"dockerizacion/#parte-3-pruebas-de-funcionamiento","title":"Parte 3: Pruebas de funcionamiento","text":"<p>La API expone los siguientes endpoints que podemos probar utilizando <code>curl</code>:</p>"},{"location":"dockerizacion/#anadir-una-persona-al-libro-de-direcciones","title":"A\u00f1adir una persona al libro de direcciones","text":"<p>Comando:</p> <pre><code>curl -X PUT http://localhost:3000/persons -H 'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Ra\u00fal\", \"lastName\": \"Profesor\"}'\n</code></pre> <p></p>"},{"location":"dockerizacion/#obtener-todas-las-personas","title":"Obtener todas las personas","text":"<p>Comando:</p> <pre><code>curl -X GET http://localhost:3000/persons -H 'Content-Type: application/json'\n</code></pre> <p></p>"},{"location":"dockerizacion/#obtener-una-persona-por-id","title":"Obtener una persona por ID","text":"<p>Comando:</p> <pre><code>curl -X GET http://localhost:3000/persons/1 -H 'Content-Type: application/json'\n</code></pre> <p></p>"},{"location":"dockerizacion/#eliminar-una-persona-por-id","title":"Eliminar una persona por ID","text":"<p>Comando:</p> <pre><code>curl -X DELETE http://localhost:3000/persons/1 -H 'Content-Type: application/json'\n</code></pre> <p></p> <p>Author: Jorge Pradillo Hinterberger</p>"}]}